syntax="proto3";

/**
 * probe messages
 */
message Probe {
    string probe_id = 1;
    int32 probe_priority = 2;
    int64 version_number = 3;

    enum Protocol {
        HTTP = 0;
        HTTPS = 1;
    }

    Protocol protocol = 4;
    string host = 5;
    int32 port = 6;
    string test_url_suffix = 7; 

    int64 start_time_seconds = 8;
    int32 probe_interval_seconds = 9;
    int32 probe_interval_post_failure_seconds = 10;
    int32 declare_failure_after_x_attempts = 11;
}

/**
 * scheduler service definition
 */
service Scheduler {
    rpc CancelProbe(CancelProbeRequest) returns (CancelProbeReply) {}
    rpc DescribeProbe(DescribeProbeRequest) returns (DescribeProbeReply) {}
    rpc ListProbeIds(ListProbeIdsRequest) returns (ListProbeIdsReply) {}
    rpc ScheduleProbe(ScheduleProbeRequest)  returns (ScheduleProbeReply) {}
}

message CancelProbeRequest {
    string probe_id = 1;
}

message CancelProbeReply {
}

message DescribeProbeRequest {
    string probe_id = 1;
}

message DescribeProbeReply {
    Probe probe = 1;
}

message ListProbeIdsRequest {
    int32 probe_priority = 1;
}

message ListProbeIdsReply {
    repeated string probe_id = 1;
}

message ScheduleProbeRequest {
    Probe probe = 2;
}

message ScheduleProbeReply {
}

/*
 * probe cache service definition
 */
service ProbeCache {
    rpc GatherProbes(GatherProbesRequest) returns (GatherProbesReply) {}
}

message GatherProbesRequest {
    int32 probe_priority = 1;
    repeated string scheduled_probe_id = 2;
}

message GatherProbesReply {
    repeated Probe probe = 1;
    repeated string cancel_probe_id = 2;
}
